#### LEZIONE DEL 20 Marzo 

# Git funziona sui file vuoti e non con cartelle vuote. 

# CONFIGURA 
git config --global user.name "mnarizzano"
git config --global user.email "mnarizzano@gmail.com"

git init # Nuovo repository
touch primo # crea nuovo file
git add primo # crea nuovo file
git commit -m "Nuovo file  " # committano una modifica 

git log // fa vedere la storia del bracnh

modifica file

(file tracciati ? file in staging?)

git commit -am "Modifica File" (metto in staging e poi in 

git diff (fa vedere le differenze di quello che si è fatto.)

File in staging
File tracciati
File creati ma non dentro il staging


git branch {per vedere i branch}
git branch "nome" (crea un nuovo branch)
git checkout nome mi porta su un branch diverso
git checkout id di un commit

git branch -b newnome "id commit"   crea un branch a partire da un commit (id commit)
git branch -d                       cancella i rami
git merge nomebranch (mergia nome branch nel branch corrente)




Normale Flusso di lavoro

- creo file
- git add file (metto in staging)
- git commit -m (file anche tracciati)
- Modifico il file (file tracciato)
- Devo committare (due modi)
   - git add file (lo rimetto in staging)
     git commit -m (lo committo)
   - git commit -a (committo tutti i file tracciati in staging)


  "Feature branch workflow"
- da un branch (master ad esempio) fai un branch nuovo
- Salti al branch nuovo
- fai le modifiche nel branch nuovo
- fai commit delle modifiche sul branch nuovo
- tornare nel branch vecchio
- fai branch
- Se c'è un conflito si risolve e poi si deve fare add del nuovo file.



Creare un alias

git config alias."Nome dell'alias" "comando da aliasare"
git config alias.s "status -s"

#### LEZIONE DEL 27 Marzo 

#TAG -- Per fare una release
git tag <nome tag (ad esempio 1.0-pre-release) (major.minor.fix = convezione di ruby)>

# creare un 

collegare il repository remoto a quello corrente

git remote add origin https://github.com/mnarizzano/lezione-27-03-2017.git (nome https del nuovo repository)
git remote -v

> origin	https://github.com/mnarizzano/lezione-27-03-2017.git (fetch) (recupero dati da remoto) (stesso concetto di pull)
> origin	https://github.com/mnarizzano/lezione-27-03-2017.git (push) (mandare i dati)

git push origin master


git push -u origin master (poi basta fare gith push)

# Abbiamo parlato delle Issues
# Abbiamo parlato delle Milestone
# Issues attached a una milestone

Per fare reference a un Issue uso "See #N" N numero issue
git commit -m "Add line to secondo See #1"

Per chiuderlo
git commit -m "Add line to Secondo che ha fatto Fix #1"
